#Elements.name: openwrt-ibsdk
#Elements.ps1-color: 4

#Elements.args: spec:bind>/spec:ro out:output \
#               -j:env>_MAKE_PARALLEL:int -V:env>_TRACE:bool -x:env>_TRACE:bool \
#               -s:env>_SHELL_AFTER:bool -S:env>_SHELL_ONLY:bool \
#               -n:instance
#Elements.env: OUT_PATH=$out

#Elements.root-copyup: true


Bootstrap: docker
From: debian:buster-slim


%runscript
 exec /.main.sh "$@"


%files
 ./chuidgid.c /usr/local/bin/chuidgid.c
 ./def-common.sh /.def-common.sh
 ./ibsdk.sh /.main.sh
 ../ibsdk.src.lock /ibsdk.src


%post
. /.def-common.sh
rm /.def-common.sh


main() {
 post_common
 
 # Unpack IB and SDK
 mkdir /unpack && cd /unpack
 mkdir imagebuilder && cd imagebuilder
 tar --strip-components=1 -x -J -f /ibsdk.src/imagebuilder.tar.xz
 cd ..
 mkdir sdk && cd sdk
 tar --strip-components=1 -x -J -f /ibsdk.src/sdk.tar.xz
 cd ..
 mv imagebuilder /
 mv sdk /
 cd / && rm -rf /unpack
 [ -e "/ibsdk.src/about" ] && mv /ibsdk.src/about /about || true
 rm -rf /ibsdk.src
 
 # Work around apparent SDK bug where liblto_plugin.so.0.0.0 is (sometimes)
 # replaced by a wrapper script when building the SDK
 cd /sdk
 local gcc_libexec="$(ls -d staging_dir/toolchain-*_gcc-*_musl/libexec/gcc/*/* | head -n1)"
 local liblto_plugin_so="liblto_plugin.so.0.0.0"
 ls -l "$gcc_libexec/.$liblto_plugin_so.bin" || true
 if [ -f "$gcc_libexec/.$liblto_plugin_so.bin" ]; then
  mv "$gcc_libexec/.$liblto_plugin_so.bin" "$gcc_libexec/$liblto_plugin_so"
 fi
 cd ..
 
 # Configure imagebuilder
 cd /imagebuilder
 sed -i -e '/^#* *CONFIG_TARGET_ROOTFS_SQUASHFS[= ]/d' .config
 echo CONFIG_TARGET_ROOTFS_SQUASHFS=y >> .config
 cd ..
}


main "$@"


# vim: set ft=sh fdm=marker:
